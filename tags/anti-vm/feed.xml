<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Anti-VM on Fl1x&#39;s Blog</title>
    <link>https://fl1xh.github.io/tags/anti-vm/</link>
    <description>Recent content in Anti-VM on Fl1x&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 05 Apr 2023 16:16:44 +0200</lastBuildDate><atom:link href="https://fl1xh.github.io/tags/anti-vm/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sandbox Evasion Techniques</title>
      <link>https://fl1xh.github.io/posts/sandbox_evasion/</link>
      <pubDate>Wed, 05 Apr 2023 16:16:44 +0200</pubDate>
      
      <guid>https://fl1xh.github.io/posts/sandbox_evasion/</guid>
      <description>Introduction Nowadays malware are becoming more sophisticated. When incidents response team or somebody who wants to analyze malware samples, they usually uses sandbox machines: A “sandbox” environment is an isolated virtual machine in which potentially dangerous software code can run without affecting network resources or local applications. The goal here is to analyze the behavior of the malicious payload/program.
Sandboxes comes with many tools for malware analysis: Debuggers, memory/disk forensics, static file analyzers, Sysinternals suite,&amp;hellip; I am familiar with some : REMnux, Cuckoo.</description>
    </item>
    
  </channel>
</rss>
